from datetime import datetime, timedelta

from faststream.rabbit.fastapi import RabbitRouter
from loguru import logger

from app.bot.creat_bot import bot
from app.config import settings, scheduler
from app.dao.dao import BookingDao
from app.dao.database import async_session_maker

faststream_router = RabbitRouter(url=settings.get_url_rabbit)

@faststream_router.subscriber("admin")
async def adm_queue(msg : str):
    for admin in settings.ADMIN_IDS:
        await bot.send_message(chat_id=admin, text=msg)


async def send_user_msg(text : str, user_id : int):
    await bot.send_message(chat_id=user_id, text=text)


@faststream_router.subscriber("user")
async def user_queue(user_id:int):
    now = datetime.now()
    notifications = [
        {'time': now + timedelta(seconds=30),
         "text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞! –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è. "
                 "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã –º—ã —Å—Ç–∞–ª–∏ –ª—É—á—à–µ! üòä"

         },
        {'time': now + timedelta(seconds=50),
         "text": "–ù–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ —Å–Ω–æ–≤–∞? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–µ –Ω–æ–≤–æ–µ –º–µ–Ω—é! üçΩÔ∏è"

         },
        {'time': now + timedelta(minutes=2),
         "text": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! –°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É WELCOMEBACK. üéâ"

         },
        {'time': now + timedelta(hours=24),
         "text": "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å! üéÅ"

         },
    ]
    for i, notification in enumerate(notifications):
        job_id = f'notifications user {user_id}_{i}'
        scheduler.add_job(
            func=send_user_msg,
            trigger='date',
            run_date=notification['time'],
            args= [notification['text'], user_id],
            id= job_id,
            replace_existing=True

        )
        logger.info(
            f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {notification['time']}")

async def disable_booking():
    async with async_session_maker() as session:
        await BookingDao(session).complete_past_bookings()





